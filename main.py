import os
import json
import time
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
import traceback

# Load environment variables
load_dotenv()

app = Flask(__name__)
APP_VERSION = "1.0.2"

# ==================== CACHE SYSTEM ====================
data_cache = {}
cache_timestamp = {}
last_request_time = {}
REQUEST_INTERVAL = 2  # 2 gi√¢y gi·ªØa c√°c request
CACHE_MAX_AGE = 30  # 30 gi√¢y

def rate_limit(api_name):
    """Gi·ªõi h·∫°n t·∫ßn su·∫•t request"""
    current_time = time.time()
    
    if api_name in last_request_time:
        time_since_last = current_time - last_request_time[api_name]
        if time_since_last < REQUEST_INTERVAL:
            wait_time = REQUEST_INTERVAL - time_since_last
            print(f"‚è≥ [RATE LIMIT] Ch·ªù {wait_time:.1f}s cho {api_name}")
            time.sleep(wait_time)
    
    last_request_time[api_name] = time.time()

def clear_old_cache():
    """T·ª± ƒë·ªông x√≥a cache c≈©"""
    current_time = time.time()
    sheets_to_clear = []
    
    for sheet_name, timestamp in cache_timestamp.items():
        if current_time - timestamp > CACHE_MAX_AGE:
            sheets_to_clear.append(sheet_name)
    
    for sheet_name in sheets_to_clear:
        if sheet_name in data_cache:
            del data_cache[sheet_name]
        if sheet_name in cache_timestamp:
            del cache_timestamp[sheet_name]
        print(f"üßπ [AUTO_CLEAR] ƒê√£ x√≥a cache {sheet_name}")

def get_cached_data(sheet_name, cache_duration=10):  # Gi·∫£m cache time xu·ªëng 10 gi√¢y
    """L·∫•y d·ªØ li·ªáu c√≥ cache ƒë·ªÉ gi·∫£m request"""
    # X√≥a cache c≈© tr∆∞·ªõc
    clear_old_cache()
    
    current_time = time.time()
    
    # Ki·ªÉm tra cache
    if (sheet_name in data_cache and 
        sheet_name in cache_timestamp and
        current_time - cache_timestamp[sheet_name] < cache_duration):
        print(f"üì¶ [CACHE] S·ª≠ d·ª•ng cache cho {sheet_name}")
        return data_cache[sheet_name]
    
    # L·∫•y d·ªØ li·ªáu m·ªõi
    print(f"üîÑ [CACHE] L·∫•y d·ªØ li·ªáu m·ªõi cho {sheet_name}")
    try:
        client = connect_to_sheets()
        if not client:
            return []
            
        sheet_id = os.environ.get('SHEET_ID', '1i5N5Gdk-SqPN7Vy5IFiHiK5CTCw9WDag2EMZ1GBI8Wo')
        spreadsheet = client.open_by_key(sheet_id)
        sheet = spreadsheet.worksheet(sheet_name)
        
        data = sheet.get_all_values()
        
        # L∆∞u cache
        data_cache[sheet_name] = data
        cache_timestamp[sheet_name] = current_time
        
        return data
        
    except Exception as e:
        print(f"‚ùå [CACHE] L·ªói l·∫•y d·ªØ li·ªáu {sheet_name}: {e}")
        return []

def clear_cache():
    """X√≥a cache (c√≥ th·ªÉ g·ªçi t·ª´ API n·∫øu c·∫ßn)"""
    data_cache.clear()
    cache_timestamp.clear()
    print("üßπ [CACHE] ƒê√£ x√≥a to√†n b·ªô cache")

# ==================== CACHE HEADERS ====================
@app.after_request
def add_header(response):
    """Th√™m headers ƒë·ªÉ tr√°nh cache tr√™n tr√¨nh duy·ªát"""
    if request.path.startswith('/api/'):
        response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
    return response

# ==================== GOOGLE SHEETS CONNECTION ====================
def connect_to_sheets():
    try:
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        
        # C√ÅCH 1: D√πng service account JSON t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Railway)
        credentials_json = os.environ.get('GOOGLE_SHEETS_CREDENTIALS')
        
        if credentials_json:
            print("‚úÖ ƒêang d√πng GOOGLE_SHEETS_CREDENTIALS t·ª´ bi·∫øn m√¥i tr∆∞·ªùng")
            try:
                credentials_info = json.loads(credentials_json)
                creds = Credentials.from_service_account_info(credentials_info, scopes=scopes)
                client = gspread.authorize(creds)
                print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
                return client
            except Exception as e:
                print(f"‚ùå L·ªói parse credentials t·ª´ bi·∫øn m√¥i tr∆∞·ªùng: {e}")
        
        # C√ÅCH 2: D√πng file service account (local development)
        creds_files = [
            'service-account.json',
            'credentials/service-account.json',
            'service_account.json'
        ]
        
        for creds_file in creds_files:
            if os.path.exists(creds_file):
                print(f"‚úÖ ƒêang d√πng file: {creds_file}")
                try:
                    creds = Credentials.from_service_account_file(creds_file, scopes=scopes)
                    client = gspread.authorize(creds)
                    print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
                    return client
                except Exception as e:
                    print(f"‚ùå L·ªói ƒë·ªçc file {creds_file}: {e}")
                    continue
        
        # C√ÅCH 3: D√πng c√°c bi·∫øn m√¥i tr∆∞·ªùng ri√™ng l·∫ª (fallback)
        print("üîÑ Th·ª≠ d√πng bi·∫øn m√¥i tr∆∞·ªùng ri√™ng l·∫ª...")
        private_key = os.environ.get('PRIVATE_KEY', '')
        
        if private_key:
            # Fix private key formatting
            private_key = private_key.replace('"', '').replace('\\n', '\n')
            
            creds_dict = {
                "type": "service_account",
                "project_id": os.environ.get('PROJECT_ID', ''),
                "private_key_id": os.environ.get('PRIVATE_KEY_ID', ''),
                "private_key": private_key,
                "client_email": os.environ.get('CLIENT_EMAIL', ''),
                "client_id": os.environ.get('CLIENT_ID', ''),
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs"
            }
            
            # Ki·ªÉm tra xem c√≥ ƒë·ªß th√¥ng tin kh√¥ng
            if all([creds_dict['private_key'], creds_dict['client_email'], creds_dict['project_id']]):
                creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
                client = gspread.authorize(creds)
                print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng v·ªõi bi·∫øn m√¥i tr∆∞·ªùng!")
                return client
        
        print("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c th·ª±c n√†o")
        return None
        
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi Google Sheets: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def normalize_date(date_str):
    """Chu·∫©n h√≥a ƒë·ªãnh d·∫°ng ng√†y t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng kh√°c nhau"""
    if not date_str:
        return ""
    
    # N·∫øu l√† ƒë·ªëi t∆∞·ª£ng datetime, chuy·ªÉn th√†nh string
    if hasattr(date_str, 'strftime'):
        return date_str.strftime("%d/%m/%Y")
    
    # Chu·∫©n h√≥a chu·ªói ng√†y
    date_str = str(date_str).strip()
    
    # X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng ng√†y ph·ªï bi·∫øn
    try:
        # ƒê·ªãnh d·∫°ng dd/mm/yyyy
        if '/' in date_str and len(date_str.split('/')) == 3:
            parts = date_str.split('/')
            if len(parts) == 3:
                day, month, year = parts
                # ƒê·∫£m b·∫£o ƒë·ªß 2 ch·ªØ s·ªë cho ng√†y v√† th√°ng
                day = day.zfill(2)
                month = month.zfill(2)
                # ƒê·∫£m b·∫£o nƒÉm c√≥ 4 ch·ªØ s·ªë
                if len(year) == 2:
                    year = '20' + year
                return f"{day}/{month}/{year}"
        
        # ƒê·ªãnh d·∫°ng kh√°c, th·ª≠ parse v·ªõi datetime
        for fmt in ['%d/%m/%Y', '%d/%m/%y', '%Y-%m-%d', '%m/%d/%Y']:
            try:
                date_obj = datetime.strptime(date_str, fmt)
                return date_obj.strftime("%d/%m/%Y")
            except ValueError:
                continue
                
    except Exception:
        pass
    
    return date_str

# ==================== ROUTES CH√çNH ====================
@app.route('/')
def index():
    return render_template('index.html', version=APP_VERSION)

@app.route('/report')
def report():
    return render_template('report.html')

@app.route('/display')
def display():
    return render_template('display.html')

@app.route('/register')
def register():
    return render_template('register.html', version=APP_VERSION)

# ==================== API ENDPOINTS (OPTIMIZED) ====================
@app.route('/api/add_dulieusv', methods=['POST'])
def add_dulieusv():
    try:
        data = request.json
        client = connect_to_sheets()
        
        if not client:
            return jsonify({'error': 'Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets'}), 500
        
        sheet_id = os.environ.get('SHEET_ID', '1i5N5Gdk-SqPN7Vy5IFiHiK5CTCw9WDag2EMZ1GBI8Wo')
        spreadsheet = client.open_by_key(sheet_id)
        sheet_data = spreadsheet.worksheet('Data')
        sheet_listds = spreadsheet.worksheet('LISTDS')
        
        mssv = data.get('mssv', '')
        khoavien = data.get('khoavien', '')
        phonghocnhom = data.get('phonghocnhom', '')
        soluong = data.get('soluong', '')
        nguoi_nhap = data.get('nguoiNhap', '')
        
        if not all([mssv, khoavien, phonghocnhom, soluong, nguoi_nhap]):
            return jsonify({'error': 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!'}), 400
        
        current_time = datetime.now()
        check_in_time = current_time.strftime("%H:%M:%S")
        check_out_time = (current_time + timedelta(minutes=90)).strftime("%H:%M:%S")
        current_date = current_time.strftime("%d/%m/%Y")
        
        phong_num = int(phonghocnhom)
        if 1 <= phong_num <= 7:
            floor_position = 'L·∫ßu 3'
        elif 8 <= phong_num <= 14:
            floor_position = 'L·∫ßu 4'
        else:
            floor_position = 'T·∫ßng tr·ªát'
        
        new_row = [
            mssv, khoavien, phonghocnhom, soluong, check_in_time,
            check_out_time, current_date, floor_position,
            f"Th√°ng {current_time.month} nƒÉm {current_time.year}",
            f"Ph√≤ng {phonghocnhom}", nguoi_nhap
        ]
        
        sheet_data.append_row(new_row)
        
        # X√≥a cache Data v√¨ c√≥ d·ªØ li·ªáu m·ªõi
        if 'Data' in data_cache:
            del data_cache['Data']
            print("üßπ [CACHE] ƒê√£ x√≥a cache Data do c√≥ d·ªØ li·ªáu m·ªõi")
        
        listds_data = sheet_listds.get_all_values()
        existing_mssvs = [row[0].replace("'", "") for row in listds_data[1:] if row]
        
        clean_mssv = mssv.replace("'", "")
        if clean_mssv not in existing_mssvs:
            sheet_listds.append_row([mssv, khoavien])
        
        return jsonify({'message': 'D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng'})
        
    except Exception as e:
        print(f"L·ªói add_dulieusv: {e}")
        return jsonify({'error': f'L·ªói server: {str(e)}'}), 500

@app.route('/api/get_data')
def get_data():
    try:
        rate_limit('get_data')
        print("üîç [get_data] ƒêang l·∫•y d·ªØ li·ªáu (cached)...")
        
        # S·ª≠ d·ª•ng cache - 10 gi√¢y (gi·∫£m t·ª´ 30)
        data = get_cached_data('Data', 10)
        
        if len(data) <= 1:
            return jsonify([])
            
        formatted_data = []
        for row in data[1:]:
            if len(row) >= 7:
                formatted_row = []
                for col_idx, cell in enumerate(row[:7]):
                    cell_value = str(cell) if cell is not None else ""
                    
                    # X·ª≠ l√Ω c·ªôt ng√†y (G)
                    if col_idx == 6:
                        normalized = normalize_date(cell_value)
                        formatted_row.append(normalized)
                    # X·ª≠ l√Ω c·ªôt gi·ªù (E, F)
                    elif col_idx in [4, 5]:
                        if cell_value and ':' in cell_value:
                            formatted_row.append(cell_value)
                        else:
                            formatted_row.append("")
                    else:
                        formatted_row.append(cell_value)
                
                formatted_data.append(formatted_row)
        
        result = formatted_data[::-1]  # Reverse order
        print(f"‚úÖ [get_data] Tr·∫£ v·ªÅ {len(result)} b·∫£n ghi")
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå L·ªñI get_data: {str(e)}")
        return jsonify([])

@app.route('/api/get_data1')
def get_data1():
    try:
        rate_limit('get_data1')
        print("üîç [get_data1] ƒêang l·∫•y d·ªØ li·ªáu (cached)...")
        
        # S·ª≠ d·ª•ng cache - 10 gi√¢y (gi·∫£m t·ª´ 30)
        data = get_cached_data('Data1', 10)
        
        if len(data) < 2:
            return jsonify([])
            
        formatted_data = []
        for row in data[1:]:
            if len(row) >= 6:
                formatted_row = [str(cell) if cell is not None else "" for cell in row[:6]]
                formatted_data.append(formatted_row)
        
        print(f"‚úÖ [get_data1] Tr·∫£ v·ªÅ {len(formatted_data)} b·∫£n ghi")
        return jsonify(formatted_data)
        
    except Exception as e:
        print(f"‚ùå L·ªñI get_data1: {str(e)}")
        return jsonify([])

@app.route('/api/get_data_count_today')
def get_data_count_today():
    try:
        print("üîç [get_data_count_today] ƒêang t√≠nh th·ªëng k√™ h√¥m nay...")
        
        # S·ª≠ d·ª•ng cache ƒë·ªÉ tr√°nh request nhi·ªÅu l·∫ßn
        data = get_cached_data('Data', 10)
        
        if len(data) <= 1:
            return jsonify({"count": 0})
            
        today = datetime.now().strftime("%d/%m/%Y")
        count = 0
        
        for row in data[1:]:
            if len(row) >= 11:  # ƒê·∫£m b·∫£o c√≥ ƒë·ªß c·ªôt ƒë·∫øn K
                date_cell = row[6]  # C·ªôt G - Ng√†y
                normalized_date = normalize_date(date_cell)
                
                if normalized_date == today:
                    count += 1
        
        print(f"‚úÖ [get_data_count_today] K·∫øt qu·∫£: {count} l∆∞·ª£t h√¥m nay")
        return jsonify({"count": count})
        
    except Exception as e:
        print(f"‚ùå [get_data_count_today] L·ªói: {e}")
        return jsonify({"count": 0})

@app.route('/api/get_data1_count_today')
def get_data1_count_today():
    try:
        print("üîç [get_data1_count_today] ƒêang t√≠nh th·ªëng k√™ ƒëƒÉng k√Ω h√¥m nay...")
        
        # S·ª≠ d·ª•ng cache
        data = get_cached_data('Data1', 10)
        
        if len(data) <= 1:
            return jsonify(0)
            
        today = datetime.now().strftime("%d/%m/%Y")
        count = 0
        
        for row in data[1:]:
            if len(row) >= 6:
                date_cell = row[5]  # C·ªôt F - Ng√†y trong Data1
                normalized_date = normalize_date(date_cell)
                
                if normalized_date == today:
                    count += 1
        
        print(f"‚úÖ [get_data1_count_today] K·∫øt qu·∫£: {count} l∆∞·ª£t ƒëƒÉng k√Ω h√¥m nay")
        return jsonify(count)
        
    except Exception as e:
        print(f"‚ùå [get_data1_count_today] L·ªói: {e}")
        return jsonify(0)

@app.route('/api/get_current_month_count_data')
def get_current_month_count_data():
    try:
        print("üîç [get_current_month_count_data] ƒêang t√≠nh th·ªëng k√™ th√°ng...")
        
        # S·ª≠ d·ª•ng cache
        data = get_cached_data('Data', 10)
        
        if len(data) <= 1:
            return jsonify(0)
            
        current_date = datetime.now()
        current_month = current_date.month
        current_year = current_date.year
        
        count = 0
        
        for row in data[1:]:
            if len(row) >= 11:
                # Ki·ªÉm tra c·∫£ c·ªôt ng√†y (G) v√† c·ªôt th√°ng (I)
                date_cell = row[6]  # C·ªôt G - Ng√†y
                month_cell = row[8]  # C·ªôt I - Th√°ng
                
                # ∆Øu ti√™n ki·ªÉm tra c·ªôt th√°ng tr∆∞·ªõc
                if month_cell and "Th√°ng" in month_cell:
                    try:
                        parts = month_cell.split()
                        if len(parts) >= 4:
                            month_str = parts[1]
                            year_str = parts[3]
                            
                            month_num = int(month_str)
                            year_num = int(year_str)
                            
                            if month_num == current_month and year_num == current_year:
                                count += 1
                                continue
                    except (ValueError, IndexError):
                        pass
                
                # N·∫øu kh√¥ng c√≥ th√¥ng tin th√°ng, ki·ªÉm tra t·ª´ c·ªôt ng√†y
                normalized_date = normalize_date(date_cell)
                if normalized_date and '/' in normalized_date:
                    try:
                        day, month, year = normalized_date.split('/')
                        month_num = int(month)
                        year_num = int(year)
                        
                        if month_num == current_month and year_num == current_year:
                            count += 1
                    except (ValueError, IndexError):
                        continue
        
        print(f"‚úÖ [get_current_month_count_data] K·∫øt qu·∫£: {count} l∆∞·ª£t th√°ng {current_month}")
        return jsonify(count)
        
    except Exception as e:
        print(f"‚ùå [get_current_month_count_data] L·ªói: {e}")
        return jsonify(0)

@app.route('/api/get_online_data')
def get_online_data():
    try:
        rate_limit('get_online_data')
        print("üîç [get_online_data] ƒêang l·∫•y d·ªØ li·ªáu (cached)...")
        
        # S·ª≠ d·ª•ng cache - 10 gi√¢y (gi·∫£m t·ª´ 15)
        data = get_cached_data('Online', 10)
        
        if len(data) < 2:
            return jsonify({'headers': [], 'data': []})

        headers = data[0]
        headers = [headers[i] for i in [0, 1, 3] if i < len(headers)]

        result_data = []
        for i in range(1, min(len(data), 21)):  # Gi·ªõi h·∫°n 20 d√≤ng
            row = data[i]
            if len(row) >= 4:
                result_data.append([
                    row[0] if len(row) > 0 else '',
                    row[1] if len(row) > 1 else '',
                    row[3] if len(row) > 3 else ''
                ])

        print(f"‚úÖ [get_online_data] Tr·∫£ v·ªÅ {len(result_data)} b·∫£n ghi")
        return jsonify({'headers': headers, 'data': result_data})
        
    except Exception as e:
        print(f"‚ùå [get_online_data] L·ªói: {e}")
        return jsonify({'headers': [], 'data': []})

@app.route('/api/search_data')
def search_data():
    try:
        keyword = request.args.get('keyword', '')
        if not keyword:
            return jsonify([])
            
        rate_limit('search_data')
        client = connect_to_sheets()
        if not client:
            return jsonify([])
            
        sheet_id = os.environ.get('SHEET_ID', '1i5N5Gdk-SqPN7Vy5IFiHiK5CTCw9WDag2EMZ1GBI8Wo')
        spreadsheet = client.open_by_key(sheet_id)
        sheet = spreadsheet.worksheet('LISTDS')
        
        data = sheet.get_all_values()
        result = []
        
        for row in data[1:]:
            if len(row) >= 2 and keyword and keyword in str(row[0]):
                result.append([row[0], row[1]])
                break
        
        return jsonify(result)
        
    except Exception as e:
        print(f"L·ªói search_data: {e}")
        return jsonify([])

@app.route('/api/get_nguoinhap_options')
def get_nguoinhap_options():
    try:
        rate_limit('get_nguoinhap_options')
        client = connect_to_sheets()
        if not client:
            return jsonify([])
            
        sheet_id = os.environ.get('SHEET_ID', '1i5N5Gdk-SqPN7Vy5IFiHiK5CTCw9WDag2EMZ1GBI8Wo')
        spreadsheet = client.open_by_key(sheet_id)
        sheet = spreadsheet.worksheet('LISTDS')
        
        data = sheet.col_values(4)
        if len(data) > 1:
            return jsonify([item for item in data[1:21] if item])
        return jsonify([])
        
    except Exception as e:
        print(f"L·ªói get_nguoinhap_options: {e}")
        return jsonify([])

@app.route('/api/delete_data1', methods=['GET'])
def delete_data1():
    try:
        index = int(request.args.get('index', 0))
        rate_limit('delete_data1')
        client = connect_to_sheets()
        if not client:
            return jsonify([])
            
        sheet_id = os.environ.get('SHEET_ID', '1i5N5Gdk-SqPN7Vy5IFiHiK5CTCw9WDag2EMZ1GBI8Wo')
        spreadsheet = client.open_by_key(sheet_id)
        sheet = spreadsheet.worksheet('Data1')
        
        sheet.delete_rows(index + 2)
        
        # X√≥a cache Data1
        if 'Data1' in data_cache:
            del data_cache['Data1']
            print("üßπ [CACHE] ƒê√£ x√≥a cache Data1 do x√≥a d·ªØ li·ªáu")
            
        return get_data1()
        
    except Exception as e:
        print(f"L·ªói delete_data1: {e}")
        return jsonify([])

# ==================== DEBUG & UTILITY ENDPOINTS ====================
@app.route('/api/debug_cache')
def debug_cache():
    """Xem tr·∫°ng th√°i cache"""
    cache_info = {}
    current_time = time.time()
    
    for sheet_name in data_cache:
        if sheet_name in cache_timestamp:
            age = current_time - cache_timestamp[sheet_name]
            cache_info[sheet_name] = {
                'cached': True,
                'age_seconds': round(age, 1),
                'rows': len(data_cache[sheet_name])
            }
        else:
            cache_info[sheet_name] = {
                'cached': False,
                'age_seconds': None,
                'rows': 0
            }
    
    return jsonify({
        'cache_info': cache_info,
        'total_cached_sheets': len(data_cache)
    })

@app.route('/api/clear_cache')
def clear_cache_endpoint():
    """API ƒë·ªÉ x√≥a cache th·ªß c√¥ng"""
    clear_cache()
    return jsonify({'message': 'Cache ƒë√£ ƒë∆∞·ª£c x√≥a'})

@app.route('/api/test_connection')
def test_connection():
    """Test k·∫øt n·ªëi c∆° b·∫£n ƒë·∫øn Google Sheets"""
    try:
        rate_limit('test_connection')
        print("=== TEST CONNECTION ===")
        client = connect_to_sheets()
        if not client:
            return jsonify({'status': 'error', 'message': 'No connection'})
        
        sheet_id = os.environ.get('SHEET_ID', '1i5N5Gdk-SqPN7Vy5IFiHiK5CTCw9WDag2EMZ1GBI8Wo')
        spreadsheet = client.open_by_key(sheet_id)
        
        # Test c√°c sheet t·ªìn t·∫°i
        sheets_info = []
        for sheet_name in ['Data', 'Data1', 'LISTDS', 'Online']:
            try:
                sheet = spreadsheet.worksheet(sheet_name)
                row_count = len(sheet.get_all_values())
                sheets_info.append({
                    'name': sheet_name,
                    'rows': row_count,
                    'status': 'OK'
                })
                print(f"TEST: Sheet '{sheet_name}' - {row_count} rows")
            except Exception as e:
                sheets_info.append({
                    'name': sheet_name,
                    'rows': 0,
                    'status': f'Error: {str(e)}'
                })
                print(f"TEST: Sheet '{sheet_name}' - ERROR: {e}")
        
        return jsonify({
            'status': 'success',
            'sheets': sheets_info
        })
        
    except Exception as e:
        print(f"‚ùå TEST CONNECTION ERROR: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/quick_stats')
def quick_stats():
    """Th·ªëng k√™ nhanh t·∫•t c·∫£"""
    try:
        rate_limit('quick_stats')
        results = {}
        
        # L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu m·ªôt l·∫ßn
        data = get_cached_data('Data', 10)  # Gi·∫£m cache time
        data1 = get_cached_data('Data1', 10)  # Gi·∫£m cache time
        
        today = datetime.now().strftime("%d/%m/%Y")
        current_month = datetime.now().month
        current_year = datetime.now().year
        
        # Th·ªëng k√™ Data
        data_count_today = 0
        month_count = 0
        
        if len(data) > 1:
            for row in data[1:]:
                if len(row) >= 7:
                    date_cell = row[6]
                    normalized_date = normalize_date(date_cell)
                    
                    if normalized_date == today:
                        data_count_today += 1
                    
                    if normalized_date and '/' in normalized_date:
                        try:
                            day, month, year = normalized_date.split('/')
                            if int(month) == current_month and int(year) == current_year:
                                month_count += 1
                        except (ValueError, IndexError):
                            continue
        
        # Th·ªëng k√™ Data1
        data1_count_today = 0
        if len(data1) > 1:
            for row in data1[1:]:
                if len(row) >= 6:
                    date_cell = row[5]
                    normalized_date = normalize_date(date_cell)
                    if normalized_date == today:
                        data1_count_today += 1
        
        results = {
            'data_count_today': data_count_today,
            'data1_count_today': data1_count_today,
            'current_month_count': month_count,
            'total_data_records': len(data) - 1,
            'total_data1_records': len(data1) - 1,
            'today': today,
            'cache_status': 'using_cache'
        }
        
        print(f"‚úÖ [quick_stats] Th·ªëng k√™ ho√†n t·∫•t")
        return jsonify(results)
        
    except Exception as e:
        print(f"‚ùå [quick_stats] L·ªói: {e}")
        return jsonify({'error': str(e)})

@app.route('/api/get_all_stats')
def get_all_stats():
    """API t·ªïng h·ª£p th·ªëng k√™ cho frontend"""
    try:
        rate_limit('get_all_stats')
        # S·ª≠ d·ª•ng cache v·ªõi th·ªùi gian ng·∫Øn h∆°n
        data = get_cached_data('Data', 10)  # Gi·∫£m t·ª´ 30 xu·ªëng 10
        data1 = get_cached_data('Data1', 10)  # Gi·∫£m t·ª´ 30 xu·ªëng 10

        today = datetime.now().strftime("%d/%m/%Y")
        current_month = datetime.now().month
        current_year = datetime.now().year

        today_usage = 0
        month_usage = 0
        today_register = 0

        # Data (l·ªãch s·ª≠)
        if len(data) > 1:
            for row in data[1:]:
                if len(row) >= 7:
                    normalized = normalize_date(row[6])
                    if normalized == today:
                        today_usage += 1
                    if normalized and '/' in normalized:
                        try:
                            _, m, y = normalized.split('/')
                            if int(m) == current_month and int(y) == current_year:
                                month_usage += 1
                        except Exception:
                            continue

        # Data1 (ƒëƒÉng k√Ω)
        if len(data1) > 1:
            for row in data1[1:]:
                if len(row) >= 6:
                    normalized = normalize_date(row[5])
                    if normalized == today:
                        today_register += 1

        return jsonify({
            'success': True,
            'data': {
                'today_usage': today_usage,
                'month_usage': month_usage,
                'today_register': today_register
            }
        })
    except Exception as e:
        print(f"‚ùå [get_all_stats] L·ªói: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/get_report_data', methods=['POST'])
def get_report_data():
    try:
        data = request.json
        staff_code = data.get('staffCode', '')
        location = data.get('location', '')
        start_date_str = data.get('startDate', '')
        end_date_str = data.get('endDate', '')
        
        print(f"üìä [REPORT] ƒêang x·ª≠ l√Ω b√°o c√°o: staff={staff_code}, location={location}, from={start_date_str}, to={end_date_str}")
        
        # L·∫•y d·ªØ li·ªáu t·ª´ cache
        sheet_data = get_cached_data('Data', 10)
        
        if len(sheet_data) <= 1:
            return jsonify([])
        
        # Danh s√°ch khoa vi·ªán
        departments = [
            'Khoa C√¥ng ngh·ªá C∆° kh√≠',
            'Khoa C√¥ng ngh·ªá Th√¥ng tin',
            'Khoa C√¥ng ngh·ªá ƒêi·ªán',
            'Khoa C√¥ng ngh·ªá ƒêi·ªán t·ª≠',
            'Khoa C√¥ng ngh·ªá ƒê·ªông l·ª±c',
            'Khoa C√¥ng ngh·ªá Nhi·ªát - L·∫°nh',
            'Khoa C√¥ng ngh·ªá May - Th·ªùi trang',
            'Khoa C√¥ng ngh·ªá H√≥a h·ªçc',
            'Khoa Ngo·∫°i ng·ªØ',
            'Khoa Qu·∫£n tr·ªã Kinh doanh',
            'Khoa Th∆∞∆°ng m·∫°i - Du l·ªãch',
            'Khoa K·ªπ thu·∫≠t X√¢y d·ª±ng',
            'Khoa Lu·∫≠t',
            'Vi·ªán T√†i ch√≠nh - K·∫ø to√°n',
            'Vi·ªán C√¥ng ngh·ªá Sinh h·ªçc v√† Th·ª±c ph·∫©m',
            'Vi·ªán Khoa h·ªçc C√¥ng ngh·ªá v√† Qu·∫£n l√Ω M√¥i tr∆∞·ªùng',
            'Khoa Khoa h·ªçc C∆° b·∫£n'
        ]
        
        # Kh·ªüi t·∫°o k·∫øt qu·∫£
        result = {}
        for dept in departments:
            result[dept] = {'count': 0, 'sum': 0}
        
        # X·ª≠ l√Ω ng√†y th√°ng
        try:
            if start_date_str:
                start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
            else:
                start_date = None
                
            if end_date_str:
                end_date = datetime.strptime(end_date_str, '%Y-%m-%d')
            else:
                end_date = None
        except ValueError as e:
            print(f"‚ùå [REPORT] L·ªói ƒë·ªãnh d·∫°ng ng√†y: {e}")
            return jsonify([])
        
        # X·ª≠ l√Ω t·ª´ng d√≤ng d·ªØ li·ªáu
        for row in sheet_data[1:]:  # B·ªè qua header
            if len(row) < 11:  # ƒê·∫£m b·∫£o c√≥ ƒë·ªß c·ªôt
                continue
                
            # L·∫•y th√¥ng tin t·ª´ c√°c c·ªôt
            department = row[1] if len(row) > 1 else ''  # C·ªôt B: Khoa vi·ªán
            quantity_str = row[3] if len(row) > 3 else '0'  # C·ªôt D: S·ªë l∆∞·ª£ng
            date_str = row[6] if len(row) > 6 else ''  # C·ªôt G: Ng√†y
            row_location = row[7] if len(row) > 7 else ''  # C·ªôt H: V·ªã tr√≠
            staff_id = row[10] if len(row) > 10 else ''  # C·ªôt K: Ng∆∞·ªùi nh·∫≠p
            
            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán l·ªçc
            valid_staff = not staff_code or staff_id == staff_code
            valid_location = not location or row_location == location
            
            # Ki·ªÉm tra ng√†y
            valid_date = True
            if start_date or end_date:
                try:
                    row_date = normalize_date(date_str)
                    if '/' in row_date:
                        day, month, year = row_date.split('/')
                        row_date_obj = datetime(int(year), int(month), int(day))
                        
                        if start_date and row_date_obj < start_date:
                            valid_date = False
                        if end_date and row_date_obj > end_date:
                            valid_date = False
                except Exception as e:
                    valid_date = False
            
            # N·∫øu th·ªèa m√£n t·∫•t c·∫£ ƒëi·ªÅu ki·ªán
            if valid_staff and valid_location and valid_date and department in result:
                try:
                    quantity = int(float(quantity_str)) if quantity_str else 0
                except ValueError:
                    quantity = 0
                
                result[department]['count'] += 1
                result[department]['sum'] += quantity
        
        # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh danh s√°ch
        processed_data = []
        for dept in departments:
            processed_data.append({
                'faculty': dept,
                'count': result[dept]['count'],
                'sum': result[dept]['sum']
            })
        
        print(f"‚úÖ [REPORT] Tr·∫£ v·ªÅ {len(processed_data)} khoa vi·ªán")
        return jsonify(processed_data)
        
    except Exception as e:
        print(f"‚ùå [REPORT] L·ªói x·ª≠ l√Ω b√°o c√°o: {e}")
        import traceback
        traceback.print_exc()
        return jsonify([])
    
# ==================== API ƒêƒÇNG K√ù PH√íNG ====================
@app.route('/api/register_room', methods=['POST'])
def register_room():
    try:
        data = request.json
        client = connect_to_sheets()
        
        if not client:
            return jsonify({'error': 'Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets'}), 500
        
        sheet_id = os.environ.get('SHEET_ID', '1i5N5Gdk-SqPN7Vy5IFiHiK5CTCw9WDag2EMZ1GBI8Wo')
        spreadsheet = client.open_by_key(sheet_id)
        sheet_data1 = spreadsheet.worksheet('Data1')
        sheet_listds = spreadsheet.worksheet('LISTDS')
        
        mssv = data.get('mssv', '')
        khoavien = data.get('khoavien', '')
        phonghocnhom = data.get('phonghocnhom', '')
        soluong = data.get('soluong', '')
        time_str = data.get('time', '')
        
        if not all([mssv, khoavien, phonghocnhom, soluong, time_str]):
            return jsonify({'error': 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!'}), 400
        
        # Validate time format
        import re
        time_regex = re.compile(r'^([01][0-9]|2[0-3]):[0-5][0-9]$')
        if not time_regex.match(time_str):
            return jsonify({'error': 'ƒê·ªãnh d·∫°ng gi·ªù kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng HH:MM (24h)'}), 400
        
        # L·∫•y ng√†y hi·ªán t·∫°i
        current_date = datetime.now()
        formatted_date = current_date.strftime("%d/%m/%Y")
        
        # X√°c ƒë·ªãnh v·ªã tr√≠ t·∫ßng d·ª±a tr√™n s·ªë ph√≤ng
        try:
            phong_num = int(phonghocnhom)
            if 1 <= phong_num <= 7:
                floor_position = 'L·∫ßu 3'
            elif 8 <= phong_num <= 14:
                floor_position = 'L·∫ßu 4'
            else:
                floor_position = 'T·∫ßng tr·ªát'
        except ValueError:
            floor_position = 'Kh√¥ng x√°c ƒë·ªãnh'
        
        # Th√™m d·ªØ li·ªáu v√†o Data1
        new_row = [
            mssv, 
            khoavien, 
            phonghocnhom, 
            soluong, 
            time_str,  # Gi·ªù ƒëƒÉng k√Ω
            formatted_date,  # Ng√†y ƒëƒÉng k√Ω
            floor_position   # V·ªã tr√≠ t·∫ßng
        ]
        
        sheet_data1.append_row(new_row)
        
        # X√≥a cache Data1 v√¨ c√≥ d·ªØ li·ªáu m·ªõi
        if 'Data1' in data_cache:
            del data_cache['Data1']
            print("üßπ [CACHE] ƒê√£ x√≥a cache Data1 do c√≥ ƒëƒÉng k√Ω m·ªõi")
        
        # Ki·ªÉm tra v√† th√™m v√†o LISTDS n·∫øu ch∆∞a c√≥
        listds_data = sheet_listds.get_all_values()
        existing_mssvs = [row[0].replace("'", "") for row in listds_data[1:] if row]
        
        clean_mssv = mssv.replace("'", "")
        if clean_mssv not in existing_mssvs:
            sheet_listds.append_row([mssv, khoavien])
            print(f"‚úÖ ƒê√£ th√™m sinh vi√™n m·ªõi v√†o LISTDS: {clean_mssv}")
        
        return jsonify({'message': 'ƒêƒÉng k√Ω ph√≤ng h·ªçc nh√≥m th√†nh c√¥ng!'})
        
    except Exception as e:
        print(f"‚ùå L·ªói register_room: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': f'L·ªói server: {str(e)}'}), 500
                            
if __name__ == '__main__':
    print("ƒêang kh·ªüi ƒë·ªông ·ª©ng d·ª•ng...")
    try:
        client = connect_to_sheets()
        if client:
            print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
        else:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets")
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
    
    app.run(host='0.0.0.0', port=8000, debug=True)